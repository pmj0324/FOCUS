# Experiment: Diffusion Model
# This experiment uses standard Diffusion (DDPM/DDIM)

experiment:
  name: "diffusion_baseline"
  description: "Standard Diffusion with 128 base channels for cosmological field generation"
  created: "2024-10-29"
  method: "diffusion"

# Training method selection
method: "diffusion"  # Use Diffusion (can also omit, as diffusion is default)

# Data - use absolute paths
data:
  maps_path: "/home/work/Cosmology/FOCUS/processed_data/maps_normalized.npy"
  params_path: "/home/work/Cosmology/FOCUS/processed_data/params_normalized.npy"
  train_split: 0.9
  num_workers: 4
  shuffle: true

# Model - SimpleUNet for Diffusion
model:
  from: "SimpleUNet"  # Standard diffusion U-Net
  in_channels: 1
  out_channels: 1
  cond_dim: 6
  base_channels: 128  # Large model, same as other experiments
  channel_mults: [1, 2, 4, 8]
  time_dim: 256  # Time embedding dimension for discrete timesteps

# Diffusion specific settings
diffusion:
  timesteps: 1000      # Number of diffusion timesteps
  beta_start: 1.0e-4   # Starting noise level
  beta_end: 0.02       # Ending noise level
  schedule: "linear"   # Noise schedule: "linear", "cosine", or "quadratic"

# Training
training:
  batch_size: 64  # Large batch size
  num_epochs: 200
  lr: 1.0e-4
  weight_decay: 1.0e-4
  cfg_prob: 0.1  # 10% unconditional training for Classifier-Free Guidance
  sample_every: 1  # Generate samples every epoch
  gradient_clip: 1.0
  
  # Optimizer
  optimizer: "adamw"
  
  # Scheduler: Plateau with warmup
  scheduler:
    name: "plateau"
    factor: 0.3  # 70% decrease in LR
    patience: 2  # Wait 2 epochs before reducing
    min_lr: 1.0e-7
    warmup_epochs: 5  # 5 epoch warmup

# Sampling (Diffusion specific)
sampling:
  method: "ddim"        # Sampling method: "ddpm" or "ddim"
  ddim_timesteps: 50    # Number of DDIM steps (much less than training timesteps)
  cfg_scale: 2.0        # Classifier-free guidance scale
  eta: 0.0              # DDIM eta (0 = deterministic, 1 = stochastic like DDPM)

# Hardware
device: "cuda"

# Notes:
# - Diffusion uses discrete timesteps (T=1000)
# - Predicts noise ε instead of vector field
# - DDIM allows fast sampling (50 steps) while maintaining quality
# - Training objective: ||ε_pred - ε_true||²

